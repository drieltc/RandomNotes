import StringInstrument from "./StringInstrument";

class Ukulele extends StringInstrument {
  tuning = ["G", "C", "E", "A"];
  amntFrets = 18;

  chordPositionsByNote = {
    C:{
        Major: [0, 0, 0, 3],
        Augmented: [],
        Major_Sixth:[0, 0, 0, 0],
        Major_Seventh:[],
        Major_Ninth:[],
        Minor: [0, 3, 3, 3],
        Diminished: [],
        Minor_Sixth: [],
        Minor_Seventh: [],
        Minor_Ninth: [],
        Sus2: [0, 2, 3, 3],
        Sus4: [0, 0, 1, 3],
    },
    C_Sharp:{
        Major: [1, 1, 1, 4], // [1, 1, 1, [1, 4]],
        Augmented: [],
        Major_Sixth:[],
        Major_Seventh:[],
        Major_Ninth:[],
        Minor: [1, 1, 0, 4],
        Diminished: [],
        Minor_Sixth: [],
        Minor_Seventh: [],
        Minor_Ninth: [],
        Sus2: [],
        Sus4: [],
    },
    D:{
        Major: [2, 2, 2, 0],
        Augmented: [],
        Major_Sixth:[],
        Major_Seventh:[],
        Major_Ninth:[],
        Minor: [2, 2, 1, 0],
        Diminished: [],
        Minor_Sixth: [],
        Minor_Seventh: [],
        Minor_Ninth: [],
        Sus2: [],
        Sus4: [],
    },
    D_Sharp:{
        Major: [0, 3, 3, 1],
        Augmented: [],
        Major_Sixth:[],
        Major_Seventh:[],
        Major_Ninth:[],
        Minor: [3, 3, 2, 1],
        Diminished: [],
        Minor_Sixth: [],
        Minor_Seventh: [],
        Minor_Ninth: [],
        Sus2: [],
        Sus4: [],
    },
    E:{
        Major: [4, 4, 4, 2],
        Augmented: [],
        Major_Sixth:[],
        Major_Seventh:[],
        Major_Ninth:[],
        Minor: [0, 4, 0, 3],
        Diminished: [],
        Minor_Sixth: [],
        Minor_Seventh: [],
        Minor_Ninth: [],
        Sus2: [],
        Sus4: [],
    },
    F:{
        Major: [2, 0, 1, 0],
        Augmented: [],
        Major_Sixth:[],
        Major_Seventh:[],
        Major_Ninth:[],
        Minor: [1, 0, 1, 3],
        Diminished: [],
        Minor_Sixth: [],
        Minor_Seventh: [],
        Minor_Ninth: [],
        Sus2: [],
        Sus4: [],
    },
    F_Sharp:{
        Major: [3, 1, 2, 1],
        Augmented: [],
        Major_Sixth:[],
        Major_Seventh:[],
        Major_Ninth:[],
        Minor: [2, 1, 2, 0],
        Diminished: [],
        Minor_Sixth: [],
        Minor_Seventh: [],
        Minor_Ninth: [],
        Sus2: [],
        Sus4: [],
    },
    G:{
        Major: [0, 2, 3, 2],
        Augmented: [],
        Major_Sixth:[],
        Major_Seventh:[],
        Major_Ninth:[],
        Minor: [0, 2, 3, 1],
        Diminished: [],
        Minor_Sixth: [],
        Minor_Seventh: [],
        Minor_Ninth: [],
        Sus2: [],
        Sus4: [],
    },
    G_Sharp:{
        Major: [1, 3, 3, 3],
        Augmented: [],
        Major_Sixth:[],
        Major_Seventh:[],
        Major_Ninth:[],
        Minor: [1, 3, 4, 2],
        Diminished: [],
        Minor_Sixth: [],
        Minor_Seventh: [],
        Minor_Ninth: [],
        Sus2: [],
        Sus4: [],
    },
    A:{
        Major:  [2, 1, 0, 0],
        Augmented: [],
        Major_Sixth:[],
        Major_Seventh:[],
        Major_Ninth:[],
        Minor: [2, 0, 0, 0],
        Diminished: [],
        Minor_Sixth: [],
        Minor_Seventh: [],
        Minor_Ninth: [],
        Sus2: [],
        Sus4: [],
    },
    A_Sharp:{
        Major: [3, 0, 1, 3],
        Augmented: [],
        Major_Sixth:[],
        Major_Seventh:[],
        Major_Ninth:[],
        Minor: [3, 1, 1, 1], //[[1, 3], [1], [1], [1]] or [[1, 3], 1, 1, 1]
        Diminished: [],
        Minor_Sixth: [],
        Minor_Seventh: [],
        Minor_Ninth: [],
        Sus2: [],
        Sus4: [],
    },
    B:{
        Major: [4, 3, 2, 2],
        Augmented: [],
        Major_Sixth:[],
        Major_Seventh:[],
        Major_Ninth:[],
        Minor: [4, 2, 2, 2], //[[2, 4], [2], [2], [2]] or [[2, 4], 2, 2, 2]
        Diminished: [],
        Minor_Sixth: [],
        Minor_Seventh: [],
        Minor_Ninth: [],
        Sus2: [],
        Sus4: [],
    },
  };

  chordPositionsByScale = {
    Major:{
        C: [0, 0, 0, 3],
        C_Sharp: [1, 1, 1, 4], //[1, 1, 1, [1, 4]]
        D:[2, 2, 2, 0],
        D_Sharp:[0, 3, 3, 1],
        E: [4, 4, 4, 2],
        F:[2, 0, 1, 0],
        F_Sharp:[3, 1, 2, 1],
        G:[0, 2, 3, 2],
        G_Sharp:[1, 3, 4, 3],
        A:[2, 1, 0, 0],
        A_Sharp:[3, 2, 1, 1],
        B:[4, 3, 2, 2],
    },
    Augmented:{
        C:[],
        C_Sharp:[],
        D:[],
        D_Sharp:[],
        E:[],
        F:[],
        F_Sharp:[],
        G:[],
        G_Sharp:[],
        A:[],
        A_Sharp:[],
        B:[]
    },
    Major_Sixth:{
        C:[0, 0, 0, 0],
        C_Sharp:[],
        D:[],
        D_Sharp:[],
        E:[],
        F:[],
        F_Sharp:[],
        G:[],
        G_Sharp:[],
        A:[],
        A_Sharp:[],
        B:[]
    },
    Major_Seventh:{
        C:[],
        C_Sharp:[],
        D:[],
        D_Sharp:[],
        E:[],
        F:[],
        F_Sharp:[],
        G:[],
        G_Sharp:[],
        A:[],
        A_Sharp:[],
        B:[]
    },
    Major_Ninth:{
        C:[],
        C_Sharp:[],
        D:[],
        D_Sharp:[],
        E:[],
        F:[],
        F_Sharp:[],
        G:[],
        G_Sharp:[],
        A:[],
        A_Sharp:[],
        B:[]
    },
    Minor:{
        C: [0, 3, 3, 3],
        C_Sharp:[1, 1, 0, 4],
        D:[2, 2, 1, 0],
        D_Sharp:[3, 3, 2, 1],
        E:[0, 4, 0, 3],
        F:[1, 0, 1, 3],
        F_Sharp:[2, 1, 2, 0],
        G:[0, 2, 3, 1],
        G_Sharp:[1, 3, 4, 2],
        A:[2, 0, 0, 0],
        A_Sharp:[3, 1, 1, 1], //[[1, 3], 1, 1, 1] or [[1, 3], [1], [1], [1]]
        B:[4, 2, 2, 2] // or [[2, 4], 2, 2, 2] or [[2, 4], [2], [2], [2]]
    },
    Diminished:{
        C:[],
        C_Sharp:[],
        D:[],
        D_Sharp:[],
        E:[],
        F:[],
        F_Sharp:[],
        G:[],
        G_Sharp:[],
        A:[],
        A_Sharp:[],
        B:[]
    },
    Minor_Sixth:{
        C:[],
        C_Sharp:[],
        D:[],
        D_Sharp:[],
        E:[],
        F:[],
        F_Sharp:[],
        G:[],
        G_Sharp:[],
        A:[],
        A_Sharp:[],
        B:[]
    },
    Minor_Seventh:{
        C:[],
        C_Sharp:[],
        D:[],
        D_Sharp:[],
        E:[],
        F:[],
        F_Sharp:[],
        G:[],
        G_Sharp:[],
        A:[],
        A_Sharp:[],
        B:[]
    },
    Minor_Ninth:{
        C:[],
        C_Sharp:[],
        D:[],
        D_Sharp:[],
        E:[],
        F:[],
        F_Sharp:[],
        G:[],
        G_Sharp:[],
        A:[],
        A_Sharp:[],
        B:[]
    },
    Sus2:{
        C: [0, 2, 3, 3],
        C_Sharp:[],
        D:[],
        D_Sharp:[],
        E:[],
        F:[],
        F_Sharp:[],
        G:[],
        G_Sharp:[],
        A:[],
        A_Sharp:[],
        B:[]
    },
    Sus4:{
        C:[0, 0, 1, 3],
        C_Sharp:[],
        D:[],
        D_Sharp:[],
        E:[],
        F:[],
        F_Sharp:[],
        G:[],
        G_Sharp:[],
        A:[],
        A_Sharp:[],
        B:[]
    },
  };

  // Define a method to play chords using the chordPositions dictionary
  playChord(chordName, options = {}) {
    const position = this.chordPositions[chordName];
    if (position) {
      this.play(chordName, position, options);
    } else {
      console.error(`Chord "${chordName}" not found.`);
    }
  }
}